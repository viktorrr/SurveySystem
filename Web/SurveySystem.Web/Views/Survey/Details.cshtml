@model SurveySystem.Web.Models.Survey.BasicSurveyDetails

@{
    ViewBag.Title = "title";
}

<div class="row">
        <div class="col-md-12">
            @if (Model == null)
            {
                <p>Невалидна анкета.</p>
            }
            else
            {
                <h1 class="text-center">@Model.Tittle</h1>
                <div class="panel panel-default">
                    <div class="panel-heading">Административни дейности</div>
                    <ul class="list-group">
                        <li class="list-group-item">@Html.ActionLink("Попълни анкетата", "Submit", new { id = Model })</li>
                        <li class="list-group-item">@Html.ActionLink("Изпрати покана", "Invite", new { id = Model })</li>
                        <li class="list-group-item">@Html.ActionLink("Провери код", "Validate", new { id = Model })</li>
                    </ul>
                </div>
            }
        </div>
    </div>

<div class="row">
    <div class="col-md-12">
        @if (Model != null)
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered dt-responsive nowrap" id="Data">
                    <thead>
                    <tr>
                        <th>#</th>
                        <th>Име</th>
                        <th>Фамилия</th>
                        <th>Факултетен номер</th>
                        <th>IP</th>
                        <th>Емайл</th>
                        <th>Начало</th>
                        <th>Край</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < Model.Submissions.Count; i++)
                    {
                        <tr>
                            <td>@(i + 1)</td>
                            @if (Model.Submissions[i].Respondent == null)
                            {
                                <td>Анонимен</td>
                                <td>потребител</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                            }
                            else
                            {
                                <td>@Model.Submissions[i].Respondent.FirstName</td>
                                <td>@Model.Submissions[i].Respondent.LastName</td>
                                <td>@Model.Submissions[i].Respondent.FacultyNumber</td>
                                <td>@Model.Submissions[i].Respondent.Email</td>
                                <td>@Model.Submissions[i].Respondent.IP</td>
                            }
                            <td>@Model.Submissions[i].BeganOn</td>
                            <td>@Model.Submissions[i].CompletedOn</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@section scripts {
    <script>
        (function() {
            var backgroundColors = [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)',
            'rgba(255, 159, 64, 0.2)'
            ];
            var borderColors = [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ];

            $(document).ready(function () {
                $.get('@Url.Action("GetQuestionMap", new { id = Model.Id })', function (data) {
                    var counter = 0;
                    for (var key in data) {
                        if (data.hasOwnProperty(key)) {
                            var $row = $("<div>").addClass("row");

                            $row.append(
                                $("<h2>").addClass("text-center").html(key));

                            $row.append(
                                $('<div>')
                                .addClass("col-md-6")
                                .html(createCanvas('pie-chart-' + counter)));

                            $row.append(
                                $('<div>')
                                .addClass("col-md-6")
                                .html(createCanvas('bar-chart-' + counter)));


                            $($('.container')[0]).append($row);

                            var questionInfo = normalize(data[key]);

                            bar(counter, questionInfo.answers, questionInfo.responses);
                            pie(counter, questionInfo.answers, questionInfo.responses);

                            counter++;
                        }
                    }

                    function createCanvas(id) {
                        return $("<canvas>")
                            .attr('id', id)
                            .attr('width', 400)
                            .attr('height', 400);
                    }

                    function normalize(questionInfo) {
                        var answersText = [];
                        var answersCount = [];
                        for (var key in questionInfo) {
                            if (questionInfo.hasOwnProperty(key)) {
                                answersText.push(key);
                                answersCount.push(questionInfo[key]);
                            }
                        }

                        return {
                            answers: answersText,
                            responses: answersCount
                        }
                    }

                });
            });

            function bar(id, answers, values) {

                var bgColor = [];
                var borderColor = [];
                var ctx = document.getElementById("bar-chart-" + id).getContext('2d');

                for (var i = 0; i < answers.length / backgroundColors.length; i += 1) {
                    bgColor = bgColor.concat(backgroundColors);
                    borderColor = borderColor.concat(borderColors);
                }

                var chartOptions = {
                    responsive: true,
                    type: 'bar',
                    data: {
                        labels: answers,
                        datasets: [
                            {
                                data: values,
                                backgroundColor: bgColor,
                                borderColor: borderColors,
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        legend: {
                            display: false
                        }
                    }
                };

                return new Chart(ctx, chartOptions);
            }

            function pie(id, answers, values) {

                var bgColor = [];
                var borderColor = [];
                var ctx = document.getElementById("pie-chart-" + id).getContext('2d');

                for (var i = 0; i < answers.length / backgroundColors.length; i += 1) {
                    bgColor = bgColor.concat(backgroundColors);
                    borderColor = borderColor.concat(borderColors);
                }

                var chartOptions = {
                    responsive: true,
                    type: 'pie',
                    data: {
                        labels: answers,
                        datasets: [
                            {
                                data: values,
                                backgroundColor: bgColor,
                                borderColor: borderColors,
                                borderWidth: 1
                            }
                        ]
                    }

                };

                return new Chart(ctx, chartOptions);
            }
        })();
    </script>
}