@using SurveySystem.Data.Models
@using SurveySystem.Web.Util
@model SurveySystem.Web.Models.Survey.NewSurveyRequest

@{
    ViewBag.Title = "Нова анкета";
}

<div class="row">
    <div class="col-md-12">
        <h2 class="text-center">@ViewBag.Title</h2>

        @Html.ValidationSummary(true)
        @using (Html.BeginForm("New", "Survey", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(x => x.Title, "Заглавие", new { @class = "control-label col-sm-2" })
                <div class="col-md-5">
                    @Html.TextBoxFor(x => x.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Title)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.BeginsOn, "Начална дата", new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    <div class='input-group date' id="start-date">
                        @Html.TextBoxFor(x => x.BeginsOn, new { @class = "form-control" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                    <p>
                        @Html.ValidationMessageFor(x => x.BeginsOn)
                    </p>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.IsAnonymous, "Анонимна анкета", new { @class = "control-label col-sm-2" })
                <div class="col-md-5">
                    @Html.CheckBoxFor(x => x.IsAnonymous)
                </div>
            </div>

            <hr />

            <div id="questions-container">
                <div id="questions-template">
                    <div class="form-group">
                        @Html.LabelFor(x => x.Questions[0].Text, "Въпрос", new { @class = "control-label col-sm-2" })
                        <div class="col-md-5">
                            @Html.TextBoxFor(x => x.Questions[0].Text, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.Questions[0].Type, "Тип на въпроса", new { @class = "control-label col-sm-2" })
                        <div class="col-sm-10">
                            @{
                                var questionTypes = EnumUtil.GetEnumValues<QuestionType>();
                                foreach (var type in questionTypes)
                                {
                                    <label class="radio-button-container">
                                        @Html.RadioButtonFor(x => x.Questions[0].Type, Convert.ToInt32(type), Html.BuildSurveryQuestionProperties(type))
                                        <span>@EnumUtil.ToString(type)</span>
                                    </label>
                                }
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.Questions[0].Type, "Отговори", new { @class = "control-label col-sm-2" })
                        <div class="col-sm-5">
                            @Html.TextAreaFor(x => x.Questions[0].Answer, 5, 1, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.Questions[0].Answer)
                        </div>
                    </div>

                    @{
                        if (Model != null && Model.Questions.Count > 1)
                        {
                            for (int i = 1; i < Model.Questions.Count; i++)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(x => x.Questions[i].Text, "Въпрос", new { @class = "control-label col-sm-2" })
                                    <div class="col-md-5">
                                        @Html.TextBoxFor(x => x.Questions[i].Text, new { @class = "form-control" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(x => x.Questions[0].Type, "Тип на въпроса", new { @class = "control-label col-sm-2" })
                                    <div class="col-sm-10">
                                        @{
                                            foreach (var type in questionTypes)
                                            {
                                                <label class="radio-button-container">
                                                    @Html.RadioButtonFor(x => x.Questions[i].Type, Convert.ToInt32(type), Html.BuildSurveryQuestionProperties(type))
                                                    <span>@EnumUtil.ToString(type)</span>
                                                </label>
                                            }
                                        }
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(x => x.Questions[i].Type, "Отговори", new { @class = "control-label col-sm-2" })
                                    <div class="col-sm-5">
                                        @Html.TextAreaFor(x => x.Questions[i].Answer, 5, 1, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.Questions[i].Answer)
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
            </div>

            <hr/>

            <div class="form-group">
                <div class="col-md-5">
                    <input type="button" value="Нов въпрос" class="btn btn-default" id="new-question" />
                    <input type="submit" value="Запази" class="btn btn-default" />
                </div>
            </div>
        }
    </div>
</div>

@section scripts {
    <script>
        $(document)
            .ready(function () {

                initCalendars();
                initNewQuestionButton();

                function initCalendars() {
                    var calendarSettings = {
                        format: 'YYYY-MM-DD',
                        locale: 'bg',
                        minDate: moment(moment().utc().add(2, 'h')),
                        date: null
                    };

                    @if (Model?.BeginsOn != null && Model.BeginsOn > DateTime.MinValue)
                    {
                        @:calendarSettings.date = new Date('@($"{Model.BeginsOn.Year}-{Model.BeginsOn.Month}-{Model.BeginsOn.Day}")');
                    }

                    // prepare the date pickers
                    $('#start-date').datetimepicker(calendarSettings);

                    @if (!string.IsNullOrEmpty(Model?.Title))
                    {
                        @:$('#Title').val('@Model.Title');
                    }
                }

                function initNewQuestionButton() {
                    var $template = $("#questions-template").clone();
                    var questionsCounter = 0;

                    $('#new-question').click(function () {
                        var replacementRegex = formatReplacementRegex();
                        var htmlToAppend = $template.html().replace(/(_|\[)(\d)(_|\])/g, replacementRegex);
                        var $element = $(htmlToAppend);
                        $element.hide();

                        $($('#questions-container').children().last()).after($element);

                        // clear values (if any)
                        $($element.find(':input')[0]).val('');
                        $($element.find('textarea')[0]).val('');
                        $($element.find('.radio-button-container input')[0]).prop('checked', true);

                        $element.show();

                        function formatReplacementRegex() {
                            questionsCounter++;
                            return '$1' + questionsCounter + '$3';
                        }
                    });
                }
            });
    </script>
}